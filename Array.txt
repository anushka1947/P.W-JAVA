Assignment 
1. What is the default value of an Array for different data types?
In Java, when an array is declared but not explicitly initialized, each element is assigned a default value based on the data type. The default values are:
* Numeric Data Types:
   * byte, short, int, long → 0
   * float, double → 0.0
* Character Data Type:
   * char → '\u0000' (Unicode null character)
* Boolean Data Type:
   * boolean → false
* Reference Data Types (Objects, Strings, etc.):
   * All object references are initialized to null.
This behavior ensures that arrays do not contain garbage values.
________________


2. Can you pass a negative number in Array size?
No, Java does not allow negative numbers as array sizes. If a negative number is provided, Java throws a NegativeArraySizeException at runtime. This is because array indices must be non-negative, starting from 0 to length-1.
For example, attempting to create an array with a negative size like this:
java

int[] arr = new int[-5]; 


Will result in:
cpp

Exception in thread "main" java.lang.NegativeArraySizeException


This prevents undefined behavior and memory corruption.
________________


3. Where is an Array stored in JVM memory?
In Java, memory is divided into different regions, and arrays are stored in the heap memory.
* Heap Memory: Arrays are objects in Java, and objects are allocated in the heap memory.
* Stack Memory: If an array is declared inside a method, its reference (or variable name) is stored in stack memory, but the actual array object remains in heap memory.
* Method Area (Class Metadata): Static arrays (declared with static keyword inside a class) have their references stored in the method area.
Thus, Java automatically manages memory allocation and garbage collection for arrays.
________________


4. What are the disadvantages of an Array?
Although arrays provide fast data access and efficient memory usage, they have several limitations:
1. Fixed Size:
   * Once an array is created, its size cannot be changed dynamically. If the size needs to be adjusted, a new array must be created.
2. Inefficient Insertion and Deletion:
   * Since arrays store elements in contiguous memory, inserting or deleting an element requires shifting elements, which is inefficient.
3. No Built-in Methods for Manipulation:
   * Unlike ArrayList, arrays do not provide built-in methods for adding, removing, or searching elements efficiently.
4. Homogeneous Data Type:
   * Arrays can only store elements of the same data type. If you need to store different data types, you must use objects or collections.
5. Memory Wastage:
   * If an array is declared with a large size but only a few elements are used, the remaining memory is wasted.
________________


5. What is an Anonymous Array in Java?
An anonymous array is an array that is declared and initialized without storing it in a reference variable. It is mainly used when the array is needed only once, such as for method arguments.
Example of an Anonymous Array:
java

new int[]{10, 20, 30, 40}; // Array is created but not assigned to a variable


Use in Method Calls:
java

public class Test {
    public static void printArray(int arr[]) {
        for (int num : arr) {
            System.out.println(num);
        }
    }


    public static void main(String[] args) {
        printArray(new int[]{1, 2, 3, 4, 5}); // Passing an anonymous array
    }
}


Advantages of Anonymous Arrays:
* They save memory by avoiding unnecessary variable declarations.
* They are useful for one-time use cases, such as function arguments.
________________


6. What are the different ways to traverse an Array in Java?
There are several ways to access and process elements of an array:
1. Using a for loop (Index-based Traversal):
   * The traditional for loop iterates through each index.
java

int[] arr = {10, 20, 30, 40};
for (int i = 0; i < arr.length; i++) {
    System.out.println(arr[i]);
}
2. 3. Using an Enhanced for loop (For-each loop):
   * This loop is a simpler way to iterate over arrays.
java

for (int num : arr) {
    System.out.println(num);
}
4. 5. Using a while loop:
   * Another alternative using a counter variable.
java

int i = 0;
while (i < arr.length) {
    System.out.println(arr[i]);
    i++;
}
6. 7. Using Java Streams (Java 8+):
   * A more modern approach using Arrays.stream()
java

Arrays.stream(arr).forEach(System.out::println);
8. ________________


7. What is the difference between length and length() method in Java?
1. length Property (for Arrays)
* It is a final variable that returns the size of an array.
* Used only for arrays.
Example:
java

int[] arr = {1, 2, 3, 4, 5};
System.out.println(arr.length); // Output: 5


2. length() Method (for Strings)
* It is a method that returns the number of characters in a string.
* Used only for String objects.
Example:
java

String str = "Hello";
System.out.pr1. What is the default value of an Array for different data types?
In Java, when an array is declared but not explicitly initialized, each element is assigned a default value based on the data type. The default values are:
* Numeric Data Types:
   * byte, short, int, long → 0
   * float, double → 0.0
* Character Data Type:
   * char → '\u0000' (Unicode null character)
* Boolean Data Type:
   * boolean → false
* Reference Data Types (Objects, Strings, etc.):
   * All object references are initialized to null.
This behavior ensures that arrays do not contain garbage values.
________________